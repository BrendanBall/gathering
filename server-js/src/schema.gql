type Query {
    rooms: [Room!]!
}

type Mutation {
    joinRoom(roomId: ID!, userId: ID!): Room!
    signal(input: SignalInput!): Boolean!
}

type Subscription {
    userJoined(roomId: ID!): Room
}

type Room {
    id: ID!
    users: [User!]!
}

type User {
    id: ID!
}

input SignalInput {
    type: String!
    userId: ID!
    roomId: ID!
    sdp: String!
}